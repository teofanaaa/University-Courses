/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-04")
public class Proba implements org.apache.thrift.TBase<Proba, Proba._Fields>, java.io.Serializable, Cloneable, Comparable<Proba> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Proba");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DENUMIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("denumire", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORIE_FIELD_DESC = new org.apache.thrift.protocol.TField("categorie", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProbaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProbaTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable String denumire; // required
  public @org.apache.thrift.annotation.Nullable String categorie; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DENUMIRE((short)2, "denumire"),
    CATEGORIE((short)3, "categorie");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DENUMIRE
          return DENUMIRE;
        case 3: // CATEGORIE
          return CATEGORIE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DENUMIRE, new org.apache.thrift.meta_data.FieldMetaData("denumire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORIE, new org.apache.thrift.meta_data.FieldMetaData("categorie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Proba.class, metaDataMap);
  }

  public Proba() {
  }

  public Proba(
    int id,
    String denumire,
    String categorie)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.denumire = denumire;
    this.categorie = categorie;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Proba(Proba other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDenumire()) {
      this.denumire = other.denumire;
    }
    if (other.isSetCategorie()) {
      this.categorie = other.categorie;
    }
  }

  public Proba deepCopy() {
    return new Proba(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.denumire = null;
    this.categorie = null;
  }

  public int getId() {
    return this.id;
  }

  public Proba setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDenumire() {
    return this.denumire;
  }

  public Proba setDenumire(@org.apache.thrift.annotation.Nullable String denumire) {
    this.denumire = denumire;
    return this;
  }

  public void unsetDenumire() {
    this.denumire = null;
  }

  /** Returns true if field denumire is set (has been assigned a value) and false otherwise */
  public boolean isSetDenumire() {
    return this.denumire != null;
  }

  public void setDenumireIsSet(boolean value) {
    if (!value) {
      this.denumire = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCategorie() {
    return this.categorie;
  }

  public Proba setCategorie(@org.apache.thrift.annotation.Nullable String categorie) {
    this.categorie = categorie;
    return this;
  }

  public void unsetCategorie() {
    this.categorie = null;
  }

  /** Returns true if field categorie is set (has been assigned a value) and false otherwise */
  public boolean isSetCategorie() {
    return this.categorie != null;
  }

  public void setCategorieIsSet(boolean value) {
    if (!value) {
      this.categorie = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DENUMIRE:
      if (value == null) {
        unsetDenumire();
      } else {
        setDenumire((String)value);
      }
      break;

    case CATEGORIE:
      if (value == null) {
        unsetCategorie();
      } else {
        setCategorie((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DENUMIRE:
      return getDenumire();

    case CATEGORIE:
      return getCategorie();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DENUMIRE:
      return isSetDenumire();
    case CATEGORIE:
      return isSetCategorie();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Proba)
      return this.equals((Proba)that);
    return false;
  }

  public boolean equals(Proba that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_denumire = true && this.isSetDenumire();
    boolean that_present_denumire = true && that.isSetDenumire();
    if (this_present_denumire || that_present_denumire) {
      if (!(this_present_denumire && that_present_denumire))
        return false;
      if (!this.denumire.equals(that.denumire))
        return false;
    }

    boolean this_present_categorie = true && this.isSetCategorie();
    boolean that_present_categorie = true && that.isSetCategorie();
    if (this_present_categorie || that_present_categorie) {
      if (!(this_present_categorie && that_present_categorie))
        return false;
      if (!this.categorie.equals(that.categorie))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetDenumire()) ? 131071 : 524287);
    if (isSetDenumire())
      hashCode = hashCode * 8191 + denumire.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategorie()) ? 131071 : 524287);
    if (isSetCategorie())
      hashCode = hashCode * 8191 + categorie.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Proba other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDenumire()).compareTo(other.isSetDenumire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDenumire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denumire, other.denumire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategorie()).compareTo(other.isSetCategorie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategorie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categorie, other.categorie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Proba(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("denumire:");
    if (this.denumire == null) {
      sb.append("null");
    } else {
      sb.append(this.denumire);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categorie:");
    if (this.categorie == null) {
      sb.append("null");
    } else {
      sb.append(this.categorie);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProbaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProbaStandardScheme getScheme() {
      return new ProbaStandardScheme();
    }
  }

  private static class ProbaStandardScheme extends org.apache.thrift.scheme.StandardScheme<Proba> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Proba struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DENUMIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.denumire = iprot.readString();
              struct.setDenumireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categorie = iprot.readString();
              struct.setCategorieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Proba struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.denumire != null) {
        oprot.writeFieldBegin(DENUMIRE_FIELD_DESC);
        oprot.writeString(struct.denumire);
        oprot.writeFieldEnd();
      }
      if (struct.categorie != null) {
        oprot.writeFieldBegin(CATEGORIE_FIELD_DESC);
        oprot.writeString(struct.categorie);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProbaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProbaTupleScheme getScheme() {
      return new ProbaTupleScheme();
    }
  }

  private static class ProbaTupleScheme extends org.apache.thrift.scheme.TupleScheme<Proba> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Proba struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDenumire()) {
        optionals.set(1);
      }
      if (struct.isSetCategorie()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDenumire()) {
        oprot.writeString(struct.denumire);
      }
      if (struct.isSetCategorie()) {
        oprot.writeString(struct.categorie);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Proba struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.denumire = iprot.readString();
        struct.setDenumireIsSet(true);
      }
      if (incoming.get(2)) {
        struct.categorie = iprot.readString();
        struct.setCategorieIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

