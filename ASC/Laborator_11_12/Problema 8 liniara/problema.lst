     1                                  ;Sa se afiseze, pentru fiecare numar de la 32 la 126, valoarea numarului (in baza 8) si caracterul cu acel cod ASCII.
     2                                  
     3                                  bits 32 
     4                                  global start
     5                                  extern exit,fprintf,fopen,fclose,fread    
     6                                  import exit msvcrt.dll   
     7                                  import fprintf msvcrt.dll
     8                                  import fopen msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  
    12                                  %include "afisare.asm"
     1                              <1> %include "conversie.asm"
     1                              <2> %ifndef _conversie_asm_
     2                              <2> %define _conversie_asm_
     3                              <2> conversie:
     4 00000000 B37F                <2>     mov bl,127
     5 00000002 28CB                <2>     sub bl,cl
     6 00000004 51                  <2>     push ecx
     7 00000005 B908000000          <2>     mov ecx,8
     8 0000000A 66BA0000            <2>     mov dx,0
     9                              <2>     biti:
    10 0000000E B000                <2>         mov al,0
    11 00000010 D0C3                <2>         rol bl,1
    12 00000012 1400                <2>         adc al,0
    13                              <2>         
    14 00000014 51                  <2>         push ecx
    15                              <2>         putere:
    16 00000015 F625[AE000000]      <2>             mul byte[doi]
    17 0000001B E2F8                <2>         loop putere
    18 0000001D 6601C2              <2>         add dx,ax
    19 00000020 59                  <2>         pop ecx
    20                              <2>         
    21 00000021 E2EB                <2>     loop biti
    22                              <2>    
    23 00000023 B800000000          <2>     mov eax,0
    24 00000028 6689D0              <2>     mov ax,dx
    25                              <2>     
    26 0000002B BF[B0000000]        <2>     mov edi,numar
    27 00000030 FC                  <2>     cld
    28                              <2>     impartiri:
    29 00000031 F635[AF000000]      <2>         div byte [opt]
    30 00000037 88C2                <2>         mov dl,al
    31 00000039 88E0                <2>         mov al,ah
    32 0000003B AA                  <2>         stosb
    33 0000003C 88D0                <2>         mov al,dl
    34 0000003E B400                <2>         mov ah,0
    35 00000040 3C00                <2>         cmp al,0
    36 00000042 75ED                <2>         jne impartiri
    37                              <2>     iesi:
    38 00000044 59                  <2>     pop ecx
    39                              <2>     
    40 00000045 C3                  <2>     ret
    41                              <2> %endif
     2                              <1> 
     3                              <1> %ifndef _afisare_asm_
     4                              <1> %define _afisare_asm_
     5                              <1> afisare:
     6 00000046 E8B5FFFFFF          <1>     call conversie
     7 0000004B BB7F000000          <1>     mov ebx,127
     8 00000050 29CB                <1>     sub ebx,ecx
     9 00000052 60                  <1>     pusha
    10 00000053 53                  <1>     push ebx
    11 00000054 FF35[B0000000]      <1>     push dword [numar]
    12 0000005A 68[A7000000]        <1>     push dword format_scriere
    13 0000005F FF35[A0000000]      <1>     push dword [descriptor_o]
    14 00000065 FF15[00000000]      <1>     call [fprintf]
    15 0000006B 83C410              <1>     add esp,16
    16 0000006E 61                  <1>     popa
    17                              <1>     
    18 0000006F C3                  <1>     ret
    19                              <1> %endif
    13                                  %include "conversie.asm"
     1                              <1> %ifndef _conversie_asm_
     2                              <1> %define _conversie_asm_
     3                              <1> conversie:
     4                              <1>     mov bl,127
     5                              <1>     sub bl,cl
     6                              <1>     push ecx
     7                              <1>     mov ecx,8
     8                              <1>     mov dx,0
     9                              <1>     biti:
    10                              <1>         mov al,0
    11                              <1>         rol bl,1
    12                              <1>         adc al,0
    13                              <1>         
    14                              <1>         push ecx
    15                              <1>         putere:
    16                              <1>             mul byte[doi]
    17                              <1>         loop putere
    18                              <1>         add dx,ax
    19                              <1>         pop ecx
    20                              <1>         
    21                              <1>     loop biti
    22                              <1>    
    23                              <1>     mov eax,0
    24                              <1>     mov ax,dx
    25                              <1>     
    26                              <1>     mov edi,numar
    27                              <1>     cld
    28                              <1>     impartiri:
    29                              <1>         div byte [opt]
    30                              <1>         mov dl,al
    31                              <1>         mov al,ah
    32                              <1>         stosb
    33                              <1>         mov al,dl
    34                              <1>         mov ah,0
    35                              <1>         cmp al,0
    36                              <1>         jne impartiri
    37                              <1>     iesi:
    38                              <1>     pop ecx
    39                              <1>     
    40                              <1>     ret
    41                              <1> %endif
    14                                  segment data use32 class=data
    15 00000070 696E7075742E747874-         fisier_input db "input.txt",0
    15 00000079 00                 
    16 0000007A 00<rept>                    fisier_output times 30 db 0
    17 00000098 7200                        mod_r db "r",0
    18 0000009A 7700                        mod_w db "w",0
    19 0000009C FFFFFFFF                    descriptor_i dd -1
    20 000000A0 FEFFFFFF                    descriptor_o dd -2
    21 000000A4 257300                      format_citire db "%s",0
    22 000000A7 2578202563200A              format_scriere db "%x %c ",0ah
    23 000000AE 02                          doi db 2
    24 000000AF 08                          opt db 8
    25 000000B0 00<rept>                    numar times 8 db 0
    26                                  segment code use32 class=code
    27                                      start:
    28 00000000 68[98000000]                    push dword mod_r
    29 00000005 68[70000000]                    push dword fisier_input
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp,8
    32                                          
    33 00000013 83F800                          cmp eax, 0
    34 00000016 7464                            je final
    35 00000018 A3[9C000000]                    mov [descriptor_i],eax
    36                                          
    37 0000001D FF35[9C000000]                  push dword [descriptor_i]
    38 00000023 6A1E                            push dword 30
    39 00000025 6A01                            push dword 1
    40 00000027 68[7A000000]                    push dword fisier_output
    41 0000002C FF15[00000000]                  call [fread]
    42 00000032 83C410                          add esp,4*4
    43                                          
    44 00000035 68[9A000000]                    push dword mod_w
    45 0000003A 68[7A000000]                    push dword fisier_output
    46 0000003F FF15[00000000]                  call [fopen]
    47 00000045 83C408                          add esp,8
    48                                          
    49 00000048 83F800                          cmp eax, 0
    50 0000004B 7420                            je final1
    51 0000004D A3[A0000000]                    mov [descriptor_o],eax
    52                                          
    53 00000052 B95F000000                      mov ecx,126-31
    54                                          repeta:
    55                                              
    56 00000057 E8(46000000)                        call afisare
    57 0000005C E2F9                            loop repeta
    58                                          
    59                                          ;inchidere fisiere
    60 0000005E FF35[A0000000]                  push dword [descriptor_o]
    61 00000064 FF15[00000000]                  call [fclose]
    62 0000006A 83C404                          add esp, 4
    63                                          
    64                                          final1:
    65 0000006D FF35[9C000000]                  push dword [descriptor_i]
    66 00000073 FF15[00000000]                  call [fclose]
    67 00000079 83C404                          add esp,4
    68                                          
    69                                          final:
    70 0000007C 6A00                            push    dword 0      
    71 0000007E FF15[00000000]                  call    [exit]    
