     1                                  ;Se da un sir de caractere S. Sa se construiasca sirul D care sa contina toate caracterele cifre din sirul S. 
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit,printf               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  import printf msvcrt.dll
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 2B34326138345835            s db '+', '4', '2', 'a', '8', '4', 'X', '5'
    16                                      len equ $-s
    17 00000008 303132333435373839          cifre db '012345789'
    18 00000011 00<rept>                    d times len db 0
    19 00000019 FF                          handle db -1
    20 0000001A 25632000                    format db "%c ",0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 B908000000                      mov ecx, len
    25 00000005 BE00000000                      mov esi,0
    26 0000000A BB00000000                      mov ebx,0
    27 0000000F E343                            jecxz final
    28                                          repeta:
    29 00000011 51                                  push ecx
    30 00000012 8A86[00000000]                      mov al,[s+esi]
    31 00000018 B90A000000                          mov ecx,10
    32 0000001D BF[08000000]                        mov edi,cifre
    33                                              cautare:
    34 00000022 AE                                      scasb
    35 00000023 7404                                    jz gasit
    36 00000025 E2FB                                loop cautare
    37 00000027 EB09                                jmp next
    38                                              gasit:
    39 00000029 89DF                                    mov edi,ebx
    40 0000002B 43                                      inc ebx
    41 0000002C 8887[11000000]                          mov [d+edi],al
    42                                              next:   
    43 00000032 46                                      inc esi
    44 00000033 59                                      pop ecx
    45 00000034 E2DB                            loop repeta
    46 00000036 BE[11000000]                    mov esi,d
    47 0000003B 89D9                            mov ecx,ebx
    48                                          afisare:
    49 0000003D AC                                  lodsb 
    50 0000003E 6698                                cbw 
    51 00000040 98                                  cwde
    52 00000041 60                                  pusha
    53 00000042 50                                  push eax
    54 00000043 68[1A000000]                        push dword format
    55 00000048 FF15[00000000]                      call [printf]
    56 0000004E 83C408                              add esp,4*2
    57 00000051 61                                  popa
    58 00000052 E2E9                            loop afisare 
    59                                          final:
    60 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
