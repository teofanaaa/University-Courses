     1                                  ;Dandu-se doua siruri de octeti sa se calculeze toate pozitiile unde al doilea sir apare ca subsir in primul sir.
     2                                  
     3                                  
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit,printf               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 050906090406050B0F-         s1 db 5, 9, 6, 9, 4, 6, 5, 11, 15, 3, 9, 6, 9, 6
    17 00000009 0309060906         
    18                                      len1 equ $-s1
    19 0000000E FF                          handle db -1
    20 0000000F 090609                      s2 db 9, 6, 9
    21                                      len2 equ $-s2
    22 00000012 25642000                    format db "%d ",0
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BE[00000000]                    mov esi,s1
    27 00000005 B90C000000                      mov ecx,len1-len2+1
    28 0000000A BB00000000                      mov ebx,0
    29 0000000F E339                            jecxz final
    30 00000011 BF[0F000000]                    mov edi,s2
    31                                          repeta:
    32 00000016 A6                                  cmpsb
    33                                              
    34 00000017 7529                                jne next
    35                                              posibil_subsir:
    36 00000019 51                                      push ecx
    37 0000001A B902000000                              mov ecx,len2-1
    38 0000001F E30B                                    jecxz afiseaza
    39 00000021 BA00000000                              mov edx,0
    40                                                  subsir:
    41 00000026 A6                                          cmpsb
    42 00000027 7514                                        jne iesi
    43 00000029 42                                          inc edx
    44 0000002A E2FA                                    loop subsir
    45                                                  afiseaza:
    46 0000002C 60                                          pusha
    47 0000002D 53                                          push ebx
    48 0000002E 68[12000000]                                push dword format
    49 00000033 FF15[00000000]                              call [printf]
    50 00000039 83C408                                      add esp,8
    51 0000003C 61                                          popa
    52                                                  iesi:
    53 0000003D 59                                          pop ecx
    54 0000003E 29D1                                        sub ecx,edx
    55 00000040 01D3                                        add ebx,edx 
    56                                              next:
    57 00000042 BF[0F000000]                            mov edi,s2
    58 00000047 43                                      inc ebx
    59                                                  
    60 00000048 E2CC                            loop repeta
    61                                          final:
    62 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
